// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfEvent struct {
	Comm     [16]uint8
	SkRcvbuf int32
	SkSndbuf int32
	SkErr    int32
	Sport    uint16
	Dport    uint16
	Saddr    uint32
	Daddr    uint32
	V6Daddr  struct{ In6U struct{ U6Addr8 [16]uint8 } }
	V6Saddr  struct{ In6U struct{ U6Addr8 [16]uint8 } }
	Family   uint16
	State    uint8
	FnType   uint8
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	InetCskAcceptExit  *ebpf.ProgramSpec `ebpf:"inet_csk_accept_exit"`
	InetCskGetPortExit *ebpf.ProgramSpec `ebpf:"inet_csk_get_port_exit"`
	TcpAbortExit       *ebpf.ProgramSpec `ebpf:"tcp_abort_exit"`
	TcpCloseExit       *ebpf.ProgramSpec `ebpf:"tcp_close_exit"`
	TcpConnectExit     *ebpf.ProgramSpec `ebpf:"tcp_connect_exit"`
	TcpDisconnectExit  *ebpf.ProgramSpec `ebpf:"tcp_disconnect_exit"`
	TcpRecvmsgExit     *ebpf.ProgramSpec `ebpf:"tcp_recvmsg_exit"`
	TcpSendmsgExit     *ebpf.ProgramSpec `ebpf:"tcp_sendmsg_exit"`
	TcpShutdownExit    *ebpf.ProgramSpec `ebpf:"tcp_shutdown_exit"`
	TcpV4ConnectExit   *ebpf.ProgramSpec `ebpf:"tcp_v4_connect_exit"`
	TcpV6ConnectExit   *ebpf.ProgramSpec `ebpf:"tcp_v6_connect_exit"`
	UdpDestroySockExit *ebpf.ProgramSpec `ebpf:"udp_destroy_sock_exit"`
	UdpInitSockExit    *ebpf.ProgramSpec `ebpf:"udp_init_sock_exit"`
	UdpRecvmsgExit     *ebpf.ProgramSpec `ebpf:"udp_recvmsg_exit"`
	UdpSendmsgExit     *ebpf.ProgramSpec `ebpf:"udp_sendmsg_exit"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	InetCskAcceptEvent  *ebpf.MapSpec `ebpf:"inet_csk_accept_event"`
	InetCskGetPortEvent *ebpf.MapSpec `ebpf:"inet_csk_get_port_event"`
	TcpAbortEvent       *ebpf.MapSpec `ebpf:"tcp_abort_event"`
	TcpCloseEvent       *ebpf.MapSpec `ebpf:"tcp_close_event"`
	TcpConnectEvent     *ebpf.MapSpec `ebpf:"tcp_connect_event"`
	TcpDisconnectEvent  *ebpf.MapSpec `ebpf:"tcp_disconnect_event"`
	TcpRecvmsgEvent     *ebpf.MapSpec `ebpf:"tcp_recvmsg_event"`
	TcpSendmsgEvent     *ebpf.MapSpec `ebpf:"tcp_sendmsg_event"`
	TcpShutdownEvent    *ebpf.MapSpec `ebpf:"tcp_shutdown_event"`
	TcpV4ConnectEvent   *ebpf.MapSpec `ebpf:"tcp_v4_connect_event"`
	TcpV6ConnectEvent   *ebpf.MapSpec `ebpf:"tcp_v6_connect_event"`
	UdpDestroySockEvent *ebpf.MapSpec `ebpf:"udp_destroy_sock_event"`
	UdpInitSockEvent    *ebpf.MapSpec `ebpf:"udp_init_sock_event"`
	UdpRecvmsgEvent     *ebpf.MapSpec `ebpf:"udp_recvmsg_event"`
	UdpSendmsgEvent     *ebpf.MapSpec `ebpf:"udp_sendmsg_event"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	InetCskAcceptEvent  *ebpf.Map `ebpf:"inet_csk_accept_event"`
	InetCskGetPortEvent *ebpf.Map `ebpf:"inet_csk_get_port_event"`
	TcpAbortEvent       *ebpf.Map `ebpf:"tcp_abort_event"`
	TcpCloseEvent       *ebpf.Map `ebpf:"tcp_close_event"`
	TcpConnectEvent     *ebpf.Map `ebpf:"tcp_connect_event"`
	TcpDisconnectEvent  *ebpf.Map `ebpf:"tcp_disconnect_event"`
	TcpRecvmsgEvent     *ebpf.Map `ebpf:"tcp_recvmsg_event"`
	TcpSendmsgEvent     *ebpf.Map `ebpf:"tcp_sendmsg_event"`
	TcpShutdownEvent    *ebpf.Map `ebpf:"tcp_shutdown_event"`
	TcpV4ConnectEvent   *ebpf.Map `ebpf:"tcp_v4_connect_event"`
	TcpV6ConnectEvent   *ebpf.Map `ebpf:"tcp_v6_connect_event"`
	UdpDestroySockEvent *ebpf.Map `ebpf:"udp_destroy_sock_event"`
	UdpInitSockEvent    *ebpf.Map `ebpf:"udp_init_sock_event"`
	UdpRecvmsgEvent     *ebpf.Map `ebpf:"udp_recvmsg_event"`
	UdpSendmsgEvent     *ebpf.Map `ebpf:"udp_sendmsg_event"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.InetCskAcceptEvent,
		m.InetCskGetPortEvent,
		m.TcpAbortEvent,
		m.TcpCloseEvent,
		m.TcpConnectEvent,
		m.TcpDisconnectEvent,
		m.TcpRecvmsgEvent,
		m.TcpSendmsgEvent,
		m.TcpShutdownEvent,
		m.TcpV4ConnectEvent,
		m.TcpV6ConnectEvent,
		m.UdpDestroySockEvent,
		m.UdpInitSockEvent,
		m.UdpRecvmsgEvent,
		m.UdpSendmsgEvent,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	InetCskAcceptExit  *ebpf.Program `ebpf:"inet_csk_accept_exit"`
	InetCskGetPortExit *ebpf.Program `ebpf:"inet_csk_get_port_exit"`
	TcpAbortExit       *ebpf.Program `ebpf:"tcp_abort_exit"`
	TcpCloseExit       *ebpf.Program `ebpf:"tcp_close_exit"`
	TcpConnectExit     *ebpf.Program `ebpf:"tcp_connect_exit"`
	TcpDisconnectExit  *ebpf.Program `ebpf:"tcp_disconnect_exit"`
	TcpRecvmsgExit     *ebpf.Program `ebpf:"tcp_recvmsg_exit"`
	TcpSendmsgExit     *ebpf.Program `ebpf:"tcp_sendmsg_exit"`
	TcpShutdownExit    *ebpf.Program `ebpf:"tcp_shutdown_exit"`
	TcpV4ConnectExit   *ebpf.Program `ebpf:"tcp_v4_connect_exit"`
	TcpV6ConnectExit   *ebpf.Program `ebpf:"tcp_v6_connect_exit"`
	UdpDestroySockExit *ebpf.Program `ebpf:"udp_destroy_sock_exit"`
	UdpInitSockExit    *ebpf.Program `ebpf:"udp_init_sock_exit"`
	UdpRecvmsgExit     *ebpf.Program `ebpf:"udp_recvmsg_exit"`
	UdpSendmsgExit     *ebpf.Program `ebpf:"udp_sendmsg_exit"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.InetCskAcceptExit,
		p.InetCskGetPortExit,
		p.TcpAbortExit,
		p.TcpCloseExit,
		p.TcpConnectExit,
		p.TcpDisconnectExit,
		p.TcpRecvmsgExit,
		p.TcpSendmsgExit,
		p.TcpShutdownExit,
		p.TcpV4ConnectExit,
		p.TcpV6ConnectExit,
		p.UdpDestroySockExit,
		p.UdpInitSockExit,
		p.UdpRecvmsgExit,
		p.UdpSendmsgExit,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
